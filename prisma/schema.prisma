// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  role          Role       @default(USER)
  events        Event[]    @relation("EventOrganizer")
  interestedIn  UserEvent[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String      @db.Text
  date        DateTime
  endDate     DateTime?
  location    String
  address     String?
  city        String      @default("SÃ£o Paulo")
  state       String      @default("SP")
  online      Boolean     @default(false)
  meetingUrl  String?
  imageUrl    String?
  website     String?
  maxAttendees Int?
  price       Decimal?    @db.Decimal(10, 2)
  currency    String      @default("BRL")
  categories  Category[]  @relation("EventCategories")
  published   Boolean     @default(false)
  featured    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  organizerId String
  organizer   User        @relation("EventOrganizer", fields: [organizerId], references: [id])
  attendees   UserEvent[]
}

model UserEvent {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  status    EventInterestStatus @default(INTERESTED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  events    Event[]  @relation("EventCategories")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ORGANIZER
  ADMIN
}

enum EventInterestStatus {
  INTERESTED
  GOING
  NOT_GOING
}